<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ReinCore</name>
    </assembly>
    <members>
        <member name="T:ReinCore.CloudMaterial">
            <summary>
            A material using CloudRemap. Generally for particle effects.
            </summary>
        </member>
        <member name="M:ReinCore.CloudMaterial.#ctor(System.String)">
            <summary>
            Creates a cloud remap material.
            </summary>
            <param name="name">The name of the material</param>
        </member>
        <member name="T:ReinCore.DistortionMaterial">
            <summary>
            A material using CloudRemap. Generally for particle effects.
            </summary>
        </member>
        <member name="M:ReinCore.DistortionMaterial.#ctor(System.String)">
            <summary>
            Creates a cloud remap material.
            </summary>
            <param name="name">The name of the material</param>
        </member>
        <member name="T:ReinCore.IntersectionCloudMaterial">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="M:ReinCore.IntersectionCloudMaterial.#ctor(System.String)">
            <summary>
            Creates a standard material.
            </summary>
            <param name="name">The name of the material</param>
        </member>
        <member name="P:ReinCore.MaterialBase.name">
            <summary>
            The name of the material
            </summary>
        </member>
        <member name="P:ReinCore.MaterialBase.shader">
            <summary>
            The shader to use
            </summary>
        </member>
        <member name="P:ReinCore.MaterialBase.material">
            <summary>
            The Material that is being created
            </summary>
        </member>
        <member name="T:ReinCore.OpaqueCloudMaterial">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="M:ReinCore.OpaqueCloudMaterial.#ctor(System.String)">
            <summary>
            Creates an opaque cloud material.
            </summary>
            <param name="name">The name of the material</param>
        </member>
        <member name="T:ReinCore.StandardMaterial">
            <summary>
            A material for normal objects in game like enemies.
            </summary>
        </member>
        <member name="M:ReinCore.StandardMaterial.#ctor(System.String)">
            <summary>
            Creates a standard material.
            </summary>
            <param name="name">The name of the material</param>
        </member>
        <member name="T:ReinCore.WavingGrassMaterial">
            <summary>
            A material using CloudRemap. Generally for particle effects.
            </summary>
        </member>
        <member name="T:ReinCore.Accessor`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:ReinCore.Accessor`2.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:ReinCore.Accessor`2.Get">
            <summary>
            
            </summary>
        </member>
        <member name="P:ReinCore.Accessor`2.Set">
            <summary>
            
            </summary>
        </member>
        <member name="T:ReinCore.Accessor`2.AccessorGetDelegate">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:ReinCore.Accessor`2.AccessorSetDelegate">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="T:ReinCore.Accessor`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:ReinCore.Accessor`1.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:ReinCore.Accessor`1.Get">
            <summary>
            
            </summary>
        </member>
        <member name="P:ReinCore.Accessor`1.Set">
            <summary>
            
            </summary>
        </member>
        <member name="T:ReinCore.Accessor`1.AccessorGetDelegate">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <returns></returns>
        </member>
        <member name="T:ReinCore.Accessor`1.AccessorSetDelegate">
            <summary>
            
            </summary>
            <param name="instance"></param>
            <param name="value"></param>
        </member>
        <member name="T:ReinCore.StaticAccessor`1">
            <summary>
            
            </summary>
        </member>
        <member name="M:ReinCore.StaticAccessor`1.#ctor(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="F:ReinCore.StaticAccessor`1.Get">
            <summary>
            
            </summary>
        </member>
        <member name="F:ReinCore.StaticAccessor`1.Set">
            <summary>
            
            </summary>
        </member>
        <member name="T:ReinCore.StaticAccessor`1.StaticAccessorGetDelegate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ReinCore.StaticAccessor`1.StaticAccessorSetDelegate">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:ReinCore.StructAccessor`2">
            <summary>
            
            </summary>
        </member>
        <member name="M:ReinCore.StructAccessor`2.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="name"></param>
        </member>
        <member name="F:ReinCore.StructAccessor`2.Get">
            <summary>
            
            </summary>
        </member>
        <member name="F:ReinCore.StructAccessor`2.Set">
            <summary>
            
            </summary>
        </member>
        <member name="T:ReinCore.StructAccessor`2.StructAccessorGetDelegate">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:ReinCore.StructAccessor`2.StructAccessorSetDelegate">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="T:ReinCore.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:ReinCore.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:ReinCore.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:ReinCore.Properties.Resources.wooting_rgb_sdk64">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="M:ReinCore.ExpandedInterpolation.InterpolationSettings.#ctor(System.Enum[])">
            <summary>
            This is slow as fuck and only exists for lazy people like me
            </summary>
            <param name="settings"></param>
        </member>
        <member name="T:ReinCore.ReinCore">
            <summary>
            
            </summary>
        </member>
        <member name="P:ReinCore.ReinCore.loaded">
            <summary>
            
            </summary>
        </member>
        <member name="P:ReinCore.ReinCore.plugins">
            <summary>
            
            </summary>
        </member>
        <member name="M:ReinCore.ReinCore.IsPluginLoaded(System.String)">
            <summary>
            
            </summary>
            <param name="guid"></param>
            <returns></returns>
        </member>
        <member name="M:ReinCore.ReinCore.Init(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            
            </summary>
            <param name="doNetChecks"></param>
            <param name="debugLogs"></param>
            <param name="infoLogs"></param>
            <param name="messageLogs"></param>
            <param name="warningLogs"></param>
            <param name="errorLogs"></param>
            <param name="fatalLogs"></param>
        </member>
        <member name="F:ReinCore.ReinCore.ver">
            <summary>
            The version of the library
            </summary>
        </member>
        <member name="T:ReinCore.EffectsCore">
            <summary>
            
            </summary>
        </member>
        <member name="T:ReinCore.HooksCore">
            <summary>
            
            </summary>
        </member>
        <member name="M:ReinCore.KeyboardCore.wooting_rgb_kbd_connected">
            <summary>
            This function offers a quick check if the keyboard is connected. It is recommended to poll this function at the start of your application and after a disconnect.
            </summary>
            <returns>true if keyboard is found</returns>
        </member>
        <member name="M:ReinCore.KeyboardCore.wooting_rgb_set_disconnected_cb(System.IntPtr)">
            <summary>
            The callback will be called when a Wooting keyboard disconnects. This will trigger after a failed color change.
            </summary>
            <param name="cb">The function pointer of the callback</param>
        </member>
        <member name="M:ReinCore.KeyboardCore.wooting_rgb_reset">
            <summary>
            This function will restore all the colours to the colours that were originally on the keyboard. This function must be called when you close the application.
            </summary>
            <returns>true if keyboard is reset</returns>
        </member>
        <member name="M:ReinCore.KeyboardCore.wooting_rgb_direct_set_key(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            This function will directly change the color of 1 key on the keyboard. This will not influence the keyboard color array. Use this function for simple amplifications, like a notification. Use the array functions if you want to change the entire keyboard.
            </summary>
            <param name="row">horizontal index of the key</param>
            <param name="column">vertical index of the key</param>
            <param name="red">value of the red color</param>
            <param name="green">value of the green color</param>
            <param name="blue">value of the blue color</param>
            <returns>true if the colour is set</returns>
        </member>
        <member name="M:ReinCore.KeyboardCore.wooting_rgb_direct_reset_key(System.Byte,System.Byte)">
            <summary>
            This function will directly reset the color of 1 key on the keyboard. This will not influence the keyboard color array. Use this function for simple amplifications, like a notification. Use the array functions if you want to change the entire keyboard
            </summary>
            <param name="row">horizontal index of the key</param>
            <param name="column">vertical index of the key</param>
            <returns>true if the colour is reset</returns>
        </member>
        <member name="M:ReinCore.KeyboardCore.wooting_rgb_array_update_keyboard">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:ReinCore.KeyboardCore.wooting_rgb_array_set_single(System.Byte,System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            This function will set a single color in the colour array. This will not directly update the keyboard (unless the flag is set), so it can be called frequently. For example in a loop that updates the entire keyboard. This way you can avoid dealing with C arrays from different languages.
            </summary>
            <param name="row">horizontal index of the key</param>
            <param name="column">vertical index of the key</param>
            <param name="red">value of the red color</param>
            <param name="green">value of the green color</param>
            <param name="blue">value of the blue color</param>
            <returns>true if the colours are changed (if auto update flag: updated)</returns>
        </member>
        <member name="T:ReinCore.LanguageCore">
            <summary>
            
            </summary>
        </member>
        <member name="P:ReinCore.LanguageCore.loaded">
            <summary>
            
            </summary>
        </member>
        <member name="M:ReinCore.LanguageCore.AddLanguageToken(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="language"></param>
        </member>
        <member name="T:ReinCore.NetworkCore">
            <summary>
            
            </summary>
        </member>
        <member name="T:ReinCore.OrbsCore">
            <summary>
            
            </summary>
        </member>
        <member name="T:ReinCore.PrefabsCore">
            <summary>
            
            </summary>
        </member>
        <member name="P:ReinCore.PrefabsCore.loaded">
            <summary>
            
            </summary>
        </member>
        <member name="M:ReinCore.PrefabsCore.ClonePrefab(UnityEngine.GameObject,System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="orginal"></param>
            <param name="name"></param>
            <param name="registerNetwork"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ReinCore.PrefabsCore.CreatePrefab(System.String,System.Boolean,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="registerNetwork"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:ReinCore.PrefabsCore.RegisterNetwork(UnityEngine.GameObject,System.String,System.String,System.Int32)">
            <summary>
            
            </summary>
            <param name="prefab"></param>
            <param name="file"></param>
            <param name="member"></param>
            <param name="line"></param>
        </member>
        <member name="T:ReinCore.SkillsCore">
            <summary>
            
            </summary>
        </member>
        <member name="P:ReinCore.SkillsCore.loaded">
            <summary>
            
            </summary>
        </member>
        <member name="M:ReinCore.SkillsCore.AddSkill(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:ReinCore.SkillsCore.AddSkillDef(RoR2.Skills.SkillDef)">
            <summary>
            
            </summary>
            <param name="skillDef"></param>
        </member>
        <member name="M:ReinCore.SkillsCore.AddSkillFamily(RoR2.Skills.SkillFamily)">
            <summary>
            
            </summary>
            <param name="skillFamily"></param>
        </member>
        <member name="P:ReinCore.SkillsCore.skillFamily">
            <summary>
            Accessor for GenericSkill.SkillFamily
            </summary>
        </member>
        <member name="M:ReinCore.SkillsCore.GetSkillFamily(RoR2.GenericSkill)">
            <summary>
            
            </summary>
            <param name="skill"></param>
            <returns></returns>
        </member>
        <member name="M:ReinCore.SkillsCore.SetSkillFamily(RoR2.GenericSkill,RoR2.Skills.SkillFamily)">
            <summary>
            
            </summary>
            <param name="skill"></param>
            <param name="family"></param>
        </member>
        <member name="T:ReinCore.SkinsCore.LockedSkinOverrideDelegate">
            <summary>
            A delegate to override the default check for if a skin is locked
            </summary>
            <param name="skinIndex">The index of the skin being checked</param>
            <returns></returns>
        </member>
        <member name="T:ReinCore.SurvivorsCore">
            <summary>
            
            </summary>
        </member>
        <member name="P:ReinCore.SurvivorsCore.loaded">
            <summary>
            
            </summary>
        </member>
        <member name="T:ResourceTools.EmbeddedResourceHelpers">
            <summary>
            A class that contains various helper methods for loading embedded resources.
            </summary>
        </member>
        <member name="M:ResourceTools.EmbeddedResourceHelpers.LoadAssetBundle(System.Byte[])">
            <summary>
            Loads an embedded assetbundle.
            </summary>
            <param name="resourceBytes">The bytes returned from Properties.[resourcename]</param>
            <returns>The loaded assetbundle</returns>
        </member>
        <member name="M:ResourceTools.EmbeddedResourceHelpers.LoadAssembly(System.Byte[])">
            <summary>
            Loads an embedded assenbly
            </summary>
            <param name="resourceBytes">The bytes returned from Properties.[resourcename]</param>
            <returns>The loaded assembly</returns>
        </member>
        <member name="M:ResourceTools.EmbeddedResourceHelpers.LoadUnmanagedLibrary(System.String,System.Byte[])">
            <summary>
            Loads an embedded unmanaged library for use with [DllImport] and extern
            </summary>
            <param name="resourceDllName">The name of the file for use with [DllImport]. Should end in .dll</param>
            <param name="resourceBytes">The bytes returned from Properties.[resourcename]</param>
        </member>
    </members>
</doc>
