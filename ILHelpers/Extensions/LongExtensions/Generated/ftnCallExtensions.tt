<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Numerics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Numerics" #>
<#@ output extension=".cs" #>
// GENERATED
<#
const UInt64 maxArgs = 4ul;
Byte[] curBytes;
UInt64[] range;
String[] baseGenArgs;





String ToBinaryString(BigInteger bigint)
{
    var bytes = bigint.ToByteArray();
    var idx = bytes.Length - 1;
    var base2 = new StringBuilder(bytes.Length * 8);

    var binary = Convert.ToString(bytes[idx], 2);

    if (binary[0] != '0' && bigint.Sign == 1)
    {
      base2.Append('0');
    }
    base2.Append(binary);

    for (idx--; idx >= 0; idx--)
    {
      base2.Append(Convert.ToString(bytes[idx], 2).PadLeft(8, '0'));
    }

    return base2.ToString().TrimStart('0');
}
Boolean GetBit(Byte[] bigIntBytes, UInt64 bitIndex)
{
	Int32 localInd = (Int32)(bitIndex%8);
	var globalInd = bitIndex/8;
	var b = bigIntBytes[globalInd];

	return (b&~(0b1u<<localInd))>0u;
}
IEnumerator<UInt64> RangeTo(Boolean incZero, UInt64 inclusiveMax)
{
	for(UInt64 i = incZero?0ul:1ul; i <= inclusiveMax; i = checked(i+1ul))
	{
		yield return i;
	}
}
IEnumerable<T> ToEnumerable<T>( IEnumerator<T> iterator )
{
	var v = Enumerable.Empty<T>();
	while( iterator.MoveNext() )
	{
		v = v.Append( iterator.Current );
	}
	return v;
}
String SelectBaseGenArg( UInt64 index )
{
	return $"T{index}";
}
String SelectPtrGenArg( String baseArg, UInt64 index )
{
	return GetBit(curBytes, index) ? $"ref {baseArg}" : baseArg;
}
String SelectStackGenArg( String baseArg, UInt64 index )
{
	return GetBit(curBytes, index) ? $"ByRef<{baseArg}>" : baseArg;
}


















































void WriteCombination( UInt64 count, BigInteger options, UInt64[] range, String[] baseGenericArgs )
{
	curBytes = options.ToByteArray();

}
BigInteger TwoPower(UInt64 num)
{
	return (BigInteger)Math.Pow(2ul, num);
}
void IterAllCombinations( UInt64 num, Action<UInt64, BigInteger> func )
{
	BigInteger offset = 0ul;
	BigInteger goal = TwoPower(num);


	UInt64 CheckedInc(UInt64 val)
	{
		try
		{
			val = checked(val+1);
		} catch
		{
			offset += val;
			goal -= val;
			val = 0ul;
		}
		return val;
	}

	range = ToEnumerable(RangeTo(false,count)).ToArray();
	baseGenArgs = range.Select(SelectBaseGenArg).ToArray();

	for( UInt64 i = 0ul; i < goal; i = CheckedInc(i) )
	{
		WriteCombination(num, i+offset, range, baseGenArgs);
	}
}
#>
namespace ILHelpers
{
	using System;


<#

for(UInt64 i = 1ul; i <= maxArgs; i = checked(i+1ul) )
{
	IterAllCombinations(i, WriteCombination);
}
#>
}